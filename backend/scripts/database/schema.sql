USE venturehub;

-- VentureHUB Database Schema for MariaDB

-- Drop tables in the correct order to avoid foreign key constraint errors.
DROP TABLE IF EXISTS `listings`;
DROP TABLE IF EXISTS `investments`;
DROP TABLE IF EXISTS `proposals`;
DROP TABLE IF EXISTS `ventures`;
DROP TABLE IF EXISTS `users`;


-- Table: users
-- Stores user account information, including credentials, role, and linked wallet.
CREATE TABLE `users` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `email` VARCHAR(255) NOT NULL UNIQUE,
    `password_hash` VARCHAR(255) NOT NULL COMMENT 'Stores a secure hash of the password (e.g., from bcrypt)',
    `full_name` VARCHAR(255) NOT NULL,
    `role` ENUM('entrepreneur', 'vc') NOT NULL COMMENT 'Defines the user''s permissions on the platform',
    `wallet_address` VARCHAR(42) UNIQUE COMMENT 'The user''s Ethereum wallet address, linked after login',
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) COMMENT='Central table for all user accounts and roles.';


-- Table: ventures
-- Stores the core off-chain information for each startup/venture.
CREATE TABLE `ventures` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `venture_nft_id` VARCHAR(255) NOT NULL UNIQUE COMMENT 'The unique NFT ID from the VentureFactory contract',
    `founder_id` INT NOT NULL,
    `name` VARCHAR(255) NOT NULL,
    `industry` VARCHAR(100) NOT NULL COMMENT 'e.g., ''Web3 & Blockchain'', ''AI & ML''',
    `mission` TEXT NOT NULL COMMENT 'The venture''s mission statement',
    `team_info` TEXT COMMENT 'Information about the founding team',
    `ipfs_metadata_uri` VARCHAR(255) UNIQUE COMMENT 'IPFS URI for the venture''s metadata JSON',
    `logo_url` VARCHAR(255) COMMENT 'Direct IPFS URI for the venture''s logo image',
    `share_token_address` VARCHAR(42) UNIQUE,
    `vault_address` VARCHAR(42) UNIQUE COMMENT 'Address of the NFT vault',
    `sale_treasury_address` VARCHAR(42) UNIQUE COMMENT 'Address of the contract selling shares',
    `dao_address` VARCHAR(42) UNIQUE,
    `timelock_address` VARCHAR(42) UNIQUE,
    `fundraising_goal` DECIMAL(20, 6) COMMENT 'The fundraising target in USDC (6 decimals)',
    `total_shares` VARCHAR(255) COMMENT 'Stores the large BigInt value for total shares (18 decimals)',
    `initial_price_per_share` VARCHAR(255) COMMENT 'Stores the initial pricePerShare BigInt string.',
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`founder_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) COMMENT='Stores details for each venture created on the platform.';


-- Table: investments
-- A join table tracking which user has invested in which venture.
CREATE TABLE `investments` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `venture_id` INT NOT NULL,
    `user_id` INT NOT NULL COMMENT 'Links to the VC who invested',
    `shares_owned` VARCHAR(255) NOT NULL COMMENT 'Stores BigInt string; BIGINT is too small for wei values',
    `last_updated` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY `venture_investor_unique` (`venture_id`, `user_id`) COMMENT 'Ensures a user has only one investment record per venture',
    FOREIGN KEY (`venture_id`) REFERENCES `ventures`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`user_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) COMMENT='Tracks ownership of venture shares by investors.';


-- Table: proposals
-- Stores off-chain details for on-chain governance proposals.
CREATE TABLE `proposals` (
    `id` INT AUTO_INCREMENT PRIMARY KEY,
    `venture_id` INT NOT NULL COMMENT 'Foreign key linking to the specific venture this proposal belongs to.',
    `proposer_id` INT NOT NULL COMMENT 'Foreign key linking to the user account that submitted the proposal.',
    `proposal_onchain_id` VARCHAR(78) NOT NULL UNIQUE COMMENT 'The unique uint256 ID generated by the Governor smart contract. Stored as a string to preserve precision.',
    `title` VARCHAR(255) NOT NULL COMMENT 'The human-readable title of the proposal.',
    `description` TEXT COMMENT 'The detailed description and rationale for the proposal.',
    `status` TINYINT DEFAULT 0 COMMENT 'Matches the Governor contract ProposalState enum (0:Pending, 1:Active, 4:Succeeded, 7:Executed, etc.)',
    `for_votes` VARCHAR(78) DEFAULT '0' COMMENT 'The number of "For" votes, synced from the blockchain. Stored as a string.',
    `against_votes` VARCHAR(78) DEFAULT '0' COMMENT 'The number of "Against" votes, synced from the blockchain. Stored as a string.',
    `abstain_votes` VARCHAR(78) DEFAULT '0' COMMENT 'The number of "Abstain" votes, synced from the blockchain. Stored as a string.',
    `targets` JSON COMMENT 'A JSON array of contract addresses to be called in an executable proposal.',
    `calldatas` JSON COMMENT 'A JSON array of encoded function call data (in bytes format) corresponding to each target.',
    `values` JSON COMMENT 'A JSON array of ETH values (wei) to send with each call (usually "0").',
    `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (`venture_id`) REFERENCES `ventures`(`id`) ON DELETE CASCADE,
    FOREIGN KEY (`proposer_id`) REFERENCES `users`(`id`) ON DELETE CASCADE
) COMMENT='A cache of governance proposals for quick UI display and interaction.';

-- Table: listings
-- Stores off-chain details for marketplace listings.
CREATE TABLE `listings` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `listing_onchain_id` INT NOT NULL UNIQUE,
  `venture_id` INT NOT NULL,
  `seller_address` VARCHAR(42) NOT NULL,
  `share_token_address` VARCHAR(42) NOT NULL,
  `amount` VARCHAR(255) NOT NULL,
  `price_per_share` VARCHAR(255) NOT NULL,
  `status` ENUM('open', 'sold', 'cancelled') DEFAULT 'open',
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (venture_id) REFERENCES ventures(id)
) COMMENT='A list of listings in the marketplace.';